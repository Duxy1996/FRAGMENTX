  <div id="editor"></div>
  <script type="text/javascript" src="/js/three.min.js"></script>
  <script type="text/javascript" src="/js/PLYLoader.js"></script>
  <script type="text/javascript" src="/js/OrbitControls.js"></script>
  <script>
  var object = new THREE.Object3D();

  var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);

  var renderer = new THREE.WebGLRenderer({
      antialias: true,
      alpha: true
  });

  var scene = new THREE.Scene();
  scene.add(object);

  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.autoClear = false;
  renderer.setClearColor(0xffffff, 0.0);

  $('#editor').append(renderer.domElement);

  // camera
  camera.position.z = 15;
  camera.lookAt(new THREE.Vector3(0, 0, 0));
  scene.add(camera);

  var clock = new THREE.Clock();

  // orbit, pan, zoom controls
  controls = new THREE.OrbitControls(camera, renderer.domElement);
  controls.enableZoom = true;
  controls.addEventListener('change', function() {
      return render;
  });

  // lightning
  directionalLight = new THREE.DirectionalLight(0xffaa44, 0.8, 100);
  directionalLight.position.set(10, 5, 10);
  directionalLight.castShadow = true;
  scene.add(directionalLight);

  light = new THREE.AmbientLight(0xffffff, 0.5);
  light.position.set(5, 1, 1);
  light.castShadow = true;
  scene.add(light);

  this.onWindowResize = function(event) {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.fov = (360 / Math.PI) * Math.atan(tanFOV * (window.innerHeight / windowHeight));
    camera.updateProjectionMatrix();
    camera.lookAt(scene.position);
    renderer.setSize(window.innerWidth, window.innerHeight);
    return renderer.render(scene, camera);
  };

  this.onMouseMove = function(event) {
    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
    return mouse.y = -(event.clientY / window.innerHeight) * 2 + 1.15;
  };

  var render = function() {
      requestAnimationFrame(render);
      var delta = clock.getDelta();
      object.rotation.y += delta/4;
      renderer.render(scene, camera);
  };

  render();

  var loader = new THREE.PLYLoader();

  var rotate_m = new THREE.Matrix4();
  rotate_m.set(
                1,  0, 0, 0,
                0,  0, 1, 0,
                0, -1, 0, 0,
                0,  0, 0, 1
  );

  var w = [null, null, null, null, null, null, null, null, null, null];

  function startWorker() {
      var index = 0;
      while(index < <%= @pieces.count %>){
        set_worker(index);
        index = index + 1;
      }
  }

  function set_worker(index){
      if(typeof(Worker) !== "undefined") {
          w[index] = new Worker('/js/parseModel.js');

          w[index].addEventListener("message", function (event) {
            var abuffer = event.data.buffer;
            var vertices = new Float32Array(abuffer);
            var buffer = new THREE.BufferAttribute(vertices, 3);

            var material = new THREE.MeshLambertMaterial( { color: 0xffffff*Math.random() } );
            var geo = new THREE.BufferGeometry();
            geo.addAttribute('position',  buffer);

            geo.computeVertexNormals();
            var child = new THREE.Mesh(geo, material);
            child.scale.multiplyScalar( 0.01 );
            child.rotation.y += Math.PI;
            child.castShadow = true;
            child.receiveShadow = true;
            child.scale.multiplyScalar( 1000 );

            var scaleMatrix = new THREE.Matrix4();
            var matrix = new THREE.Matrix4();
            scaleMatrix.fromArray('<%= @pieces[' + index +'.to_i].matrix %>'.split(' ')).transpose();
            scaleMatrix.multiplyMatrices ( rotate_m, scaleMatrix );

            child.geometry.applyMatrix(scaleMatrix);
            child.geometry.verticesNeedUpdate = true;

            object.add(child);
          }, false);

          w[index].postMessage('<%= @pieces[' + index + '.to_i].model.url %>');

      } else {
          console.log("Sorry, your browser does not support Web Workers...");
      }
  }

  startWorker();
  </script>
