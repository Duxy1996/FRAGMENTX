<% if !cookies[:knows_controls] %>
  <% cookies[:knows_controls] = "yes" %>
  <div class="banner">
    Use right button mouse to pan, left button to orbit and scroll to zoom in and out.
  </div>
<% end %>
<div id="info-toggle" onclick="showInfo()">
  <i class="fas fa-info fa-2x"></i>
</div>
<section id="info-container">
  <div class="branding">
    <i class="fas fa-times right" onclick="hideInfo()"></i>
    <p>
      <% @object.categories.each do |category| %>
        <span class="badge badge-pill badge-light"><% category.name %></span>
      <% end %>
    </p>
    <h1><%= @object.title %></h1>
    <% if @object.author %>
      <h2>By <%= @object.author %></h2>
    <% end %>
    <h3>
      <% @object.materials.each do |material| %>
        <span class="badge badge-pill badge-light"><%= material.name %></span>
      <% end %>
    </h3>
    <small>
        <% if @object.in_inventory %>
            <%= @object.inventory_no %>
        <% else %>
            Not in inventory
        <% end %>
    </small>
  </div>
  <div class="toolbar-container">
    <div class="row">
        <div class="col-sm-6">
            <div class="info-field">
                <% if @object.state %>
                    <%= label_tag :state %><br/>
                    <%= @object.state.name%>
                <% end %>
            </div>
            <div class="info-field">
                <%= label_tag :priority %><br/>
                <%= @object.priority.name %>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="info-field">
                <%= label_tag :protection %><br/>
                <%= @object.protection.name %><br/>
            </div>
            <div class="info-field">
                <%= label_tag 'dimensions' %>
                <p><%= dimensions(@object) %></p>
            </div>
        </div>
    </div>
    <% if @object.deteriorations %>
        <%= label_tag :deteriorations%>
        <div class="info-field">
            <% @object.deteriorations.each do |deterioration| %>
                <%= deterioration.name %><br/>
            <% end %>
        </div>
    <% end %>
    <div class="info-field">
      <%= label_tag 'description' %>
      <p><%= @object.description %></p>
    </div>
    <div class="info-field">
      <%= label_tag 'epoch' %>
      <p><%= @object.epoch %></p>
    </div>
    <div class="info-field">
      <%= label_tag 'classification' %>
      <p><%= @object.classification %></p>
    </div>
    <div class="info-field">
      <%= label_tag 'technique' %>
      <p><%= @object.classification %></p>
    </div>
    <div class="info-field">
      <%= label_tag 'decoration' %>
      <p><%= @object.classification %></p>
    </div>
    <div class="info-field">
      <%= label_tag 'owner' %>
      <p><%= @object.owner %></p>
    </div>
    <div class="info-field">
      <%= label_tag 'deposit' %>
      <p><%= @object.deposit %></p>
      <p><%= @object.address %></p>
      <p><%= @object.location %></p>
      <% if @object.latitude && @object.longitude %>
        <p><%= "(#{@object.longitude}, #{@object.longitude})" %></p>
        <%= image_tag "http://maps.googleapis.com/maps/api/staticmap?center=#{@object.latitude},#{@object.longitude}&markers=#{@object.latitude},#{@object.longitude}&zoom=13&size=640x400&key=AIzaSyA5_37fS8M4baOAP7w8fiXCn-VA4FcgBSw", alt: "#{@object.address} on the map", class:'gmap' %>
      <% end %>
      <br/>
    </div>
    <div class="info-field">
      <%= label_tag 'notes' %>
      <p><%= @object.notes %></p>
    </div>
  </div>
</section>

<div id="mini-branding" onclick="showToolbar()">
  <div class="branding mini-brand no-padding">
    <h1><i class="fas fa-bars"></i> ScanViewer</h1>
  </div>
  <div id="mini-menu" class="no-padding">
    <%= link_to "Back", restored_objects_path %>
  </div>
</div>
<div id="maesure">
    <div class="container">
    <div class="row">
        <div class="col-sm maesure-column">
        <p class="maesure-paragraph">Points</p>
        <p id="measurePo" class="maesure-font">0</p>
        </div>
        <div class="col-sm maesure-column">
        <p class="maesure-paragraph">Maesure</p>
        <p id="measureNo" class="maesure-font">0</p>
        </div>
        <div class="col-sm maesure-column">
        <button onclick="deleteLastMesure()" class="btn btn-primary toolbar-button"><img class="svg-icon" src="/icons/all.svg" /><br/>Remove last</button>
        </div>
        <div class="col-sm maesure-column">
        <button onclick="resetMesures()" class="btn btn-primary toolbar-button"><img class="svg-icon" src="/icons/all.svg" /><br/>Remove all</button>
        </div>
    </div>
    </div>
</div>
<section id="toolbar">
  <div class="branding">
    <i class="fas fa-times right" onclick="hideToolbar()"></i>
    <h1 class="brand-title">ScanViewer</h1>
  </div>
  <div class="toolbar-container">
    <div class="toolbar-section">
        <p>Visibility mode</p>
        <div class="toolbar-section-row">
        <button onclick="allParts()" class="btn btn-primary toolbar-button"><img class="svg-icon" src="/icons/all.svg" /><br/>All</button>
        <button onclick="goodParts()" class="btn btn-primary toolbar-button"><img class="svg-icon" src="/icons/pieces.svg" /><br/>Present</button>
        <button onclick="faltantParts()" class="btn btn-primary toolbar-button"><img class="svg-icon" src="/icons/missing.svg" /><br/>Missing</button>
        </div>
        <p>Model rotation</p>
        <div class="toolbar-section-row">
        <button id="pauseButton" onclick="changeRotationMode()" class="btn btn-primary toolbar-button big">
            <i class="fas fa-pause"></i> Pause
        </button>
        </div>
    </div>
    <div class="toolbar-section">
        <p>Perspective</p>
        <div class="toolbar-section-row">
        <button class="btn btn-primary toolbar-button" onclick="down_camera()"><img class="svg-icon" src="/icons/xz.svg" /><br/>XZ</button>
        <button class="btn btn-primary toolbar-button" onclick="up_camera()"><img class="svg-icon" src="/icons/xy.svg" /><br/>XY</button>
        <button class="btn btn-primary toolbar-button" onclick="left_camera()"><img class="svg-icon" src="/icons/zy.svg" /><br/>ZY</button>
        </div>
    </div>
    <div class="toolbar-section">
        <p>Cut object</p>
        <div class="toolbar-section-row">
        <button onclick="setClip(0)" class="btn btn-primary toolbar-button clip-button">X</button>
        <input type="range" min="-10" max="10" step="0.1" value="0" class="slider" id="clipX">
        </div>
        <div class="toolbar-section-row">
        <button onclick="setClip(1)" class="btn btn-primary toolbar-button clip-button">Y</button>
        <input type="range" min="-10" max="10" step="0.1" value="0" class="slider" id="clipY">
        </div>
        <div class="toolbar-section-row">
        <button onclick="setClip(2)" class="btn btn-primary toolbar-button clip-button">Z</button>
        <input type="range" min="-10" max="10" step="0.1" value="0" class="slider" id="clipZ">
        </div>
    </div>
    <div class="toolbar-section">
        <p>Tools</p>
        <div class="toolbar-section-row">
        <button class="btn btn-primary toolbar-button" onclick="measures()"><img class="svg-icon" src="/icons/ruler.svg" /><br/>Measure</button>
        <button class="btn btn-primary toolbar-button" onclick="wireframeSet()"><img class="svg-icon" src="/icons/wireframe.svg" /><br/>Wireframe</button>
        <button class="btn btn-primary toolbar-button" onclick="addTorch()"><img class="svg-icon" src="/icons/light.svg" /><br/>Light</button>
        </div>
        <div class="toolbar-section-row">
        <button class="btn btn-primary toolbar-button big"><img class="inline-icon" src="/icons/pic.svg" /> Save view as image</button>
        </div>
        </div>
    </div>
  </div>
</section>
<div id="editor"></div>

  <script type="text/javascript" src="/js/three.min.js"></script>
  <script type="text/javascript" src="/js/PLYLoader.js"></script>
  <script type="text/javascript" src="/js/OrbitControls.js"></script>

  <script>

    function hideToolbar() {
        $('#toolbar').animate({
            opacity: 0.25,
            left: "-=1000"
        }, 500);
    }

    function showToolbar() {
        $('#toolbar').animate({
            opacity: 1,
            left: "0"
        }, 500);
    }

    function hideInfo() {
        $('#info-container').animate({
            opacity: 0.25,
            right: "-=1000"
        }, 500);
    }

    function showInfo() {
        $('#info-container').animate({
            opacity: 1,
            right: "0"
        }, 500);
    }

    function hideMeasurebar() {
        $('#maesure').animate({
            opacity: 0.25,
            bottom: "-=1000"
        }, 500);
    }

    function showMeasurebar() {
        $('#maesure').animate({
            opacity: 1,
            bottom: "0"
        }, 500);
    }


    //var arrow     = null;
    var selection     = null;
    var wireframeMode = false;
    var torchMode     = false;
    var rotationMode  = false;
    var measure       = false;
    var spotLight     = null;
    var strDownloadMime = "image/octet-stream";
    var mouse         = new THREE.Vector2();

    var globalPlaneX = new THREE.Plane( new THREE.Vector3( -1,  0,  0 ),10000 );
    var globalPlaneY = new THREE.Plane( new THREE.Vector3(  0, -1,  0 ),10000 );
    var globalPlaneZ = new THREE.Plane( new THREE.Vector3(  0,  0, -1 ),10000 );

    var clippingPlanes = [ globalPlaneX, globalPlaneY, globalPlaneZ ], Empty = Object.freeze( [] );

    var clipping = [false, false, false];

    var inputs = $('input[type=range]');

    $('#clipX').on('input', function() { clip(0) });
    $('#clipY').on('input', function() { clip(1) });
    $('#clipZ').on('input', function() { clip(2) });

    function clip(coord) {
        if (clipping[coord]) clippingPlanes[coord].constant = inputs[coord].value;
    }

    function unclip(coord) {
        clippingPlanes[coord].constant = 10000;
    }

    function setClip(coord) {
        clipping[coord] = !clipping[coord];
        if (clipping[coord]) clip(coord);
        else unclip(coord);
    }


    var object = new THREE.Object3D();
    var pieces = [];

    var object_f = new THREE.Object3D();
    var faltants = [];

    var mesurePoints = new THREE.Object3D();
    var mesurePointsList = [];

    var camera    = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);

    var renderer = new THREE.WebGLRenderer({
        preserveDrawingBuffer: true,
        antialias: true,
        alpha: true,
        localClippingEnabled : true
    });

    renderer.clippingPlanes = clippingPlanes;

    // Spheres of light, world and measure
    var geometry = new THREE.SphereGeometry( 5, 32, 32 );
    var material = new THREE.MeshBasicMaterial( {
        color: 0xffff00,
        side: THREE.DoubleSide,
        clippingPlanes: clippingPlanes,
        clipShadows: true} );
    var sphere = new THREE.Mesh( geometry, material );

    var geometry_world = new THREE.SphereGeometry( 100, 32, 32 );
    var material_world = new THREE.MeshBasicMaterial( {
        color: 0xffffff,
        side: THREE.DoubleSide,
        clippingPlanes: clippingPlanes,
        clipShadows: true,
        wireframe: true,
        transparent: true,
        opacity: 0.0} );
    var sphere_world = new THREE.Mesh( geometry_world, material_world );

    var geometryMesure = new THREE.SphereGeometry( 0.2, 32, 32 );

    var scene = new THREE.Scene();
    scene.add(object);
    scene.add(object_f);
    scene.add(sphere_world);

    // render
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.autoClear = true;
    renderer.setClearColor(0xffffff, 0.0);
    renderer.shadowMap.enabled = false;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;

    $('#editor').append(renderer.domElement);

    // raycaster
    raycaster = new THREE.Raycaster();

    // selection material
    selectionMaterial = new THREE.MeshLambertMaterial({
        color: 0x40e0d0,
        side: THREE.DoubleSide,
        clippingPlanes: clippingPlanes,
        clipShadows: true
        });
    // normal material
    unselectedMAterial = new THREE.MeshLambertMaterial({
        color: 0xcdb380,
        side: THREE.DoubleSide,
        clippingPlanes: clippingPlanes,
        clipShadows: true
        });
    // wireframe material
    wireframeMaterial = new THREE.MeshBasicMaterial({
        color: 0xe8ddcb,
        side: THREE.DoubleSide,
        clippingPlanes: clippingPlanes,
        clipShadows: true,
        wireframe: true
    });
    // wireframe material
    wireframeMaterialSelected = new THREE.MeshBasicMaterial({
        color: 0x40e0d0,
        side: THREE.DoubleSide,
        clippingPlanes: clippingPlanes,
        clipShadows: true,
        wireframe: true
    });

    // mousemove
    window.addEventListener( 'mousemove', onmousemove, false );
    function onmousemove(event) {
        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
        mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
    };

    // camera
    camera.position.z = 30;
    camera.lookAt(new THREE.Vector3(0, 0, 0));
    scene.add(camera);

    var clock = new THREE.Clock();

    // orbit, pan, zoom controls
    controls = new THREE.OrbitControls(camera, renderer.domElement);
    controls.enableZoom = true;
    controls.addEventListener('change', function() {
        return render;
    });

    // lightning
    directionalLight = new THREE.DirectionalLight(0xffaa44, 0.8, 100);
    directionalLight.position.set(10, 5, 10);
    directionalLight.castShadow = true;
    scene.add(directionalLight);

    light = new THREE.AmbientLight(0xffffff, 0.5);
    light.position.set(5, 1, 1);
    light.castShadow = true;
    scene.add(light);

    window.addEventListener( 'resize', onWindowResize, false );

    function onWindowResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        camera.lookAt(scene.position);
        renderer.setSize(window.innerWidth, window.innerHeight);
        raycaster.setFromCamera(mouse, camera);
        renderer.render(scene, camera);
    };

    this.onMouseMove = function(event) {
        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
        return mouse.y = -(event.clientY / window.innerHeight) * 2 + 1.15;
    };

    var render = function() {
        requestAnimationFrame(render);
        var delta = clock.getDelta();
        if(rotationMode) {
        object.rotation.y += delta/4;
        object_f.rotation.y += delta/4;
        }
        renderer.render(scene, camera);
    };

    render();

    var loader = new THREE.PLYLoader();

    var rotate_m = new THREE.Matrix4();
    rotate_m.set(
                    1,  0, 0, 0,
                    0,  0, 1, 0,
                    0, -1, 0, 0,
                    0,  0, 0, 1
    );

    var w = new Array(gon.pieces.length);

    function startWorker() {
        for(let index = 0; index < gon.pieces.length; index++) {
            set_worker(index);
        }
    }

    function set_worker(index) {
        if(typeof(Worker) !== "undefined") {
            w[index] = new Worker('/js/parseModel.js');
            w[index].addEventListener("message", function (event) {
                var abuffer = event.data.buffer;
                var vertices = new Float32Array(abuffer);
                var buffer = new THREE.BufferAttribute(vertices, 3);

                var geo = new THREE.BufferGeometry();
                geo.addAttribute('position',  buffer);

                geo.computeVertexNormals();
                var child = new THREE.Mesh(geo, unselectedMAterial);
                child.scale.multiplyScalar( 0.01 );
                child.rotation.y += Math.PI;
                child.castShadow = true;
                child.receiveShadow = true;
                child.scale.multiplyScalar( 1000 );

                var scaleMatrix = new THREE.Matrix4();
                var matrix = new THREE.Matrix4();
                scaleMatrix.fromArray(gon.matrices[index].trim().split(' ').filter(function(val) { return val.length != 0; })).transpose();
                scaleMatrix.multiplyMatrices ( rotate_m, scaleMatrix );

                child.geometry.applyMatrix(scaleMatrix);
                child.geometry.verticesNeedUpdate = true;

                if( gon.missings[index] ) {
                pieces.push(child);
                object.add(child);
                } else {
                faltants.push(child);
                object_f.add(child);
                }
            }, false);
            w[index].postMessage(gon.pieces[index]);

        } else {
            console.log("Sorry, your browser does not support Web Workers...");
        }
    }

    renderer.domElement.addEventListener('mousedown', function(event) {
        var intersects, selected;
        event.preventDefault();
        raycaster.setFromCamera(mouse, camera);
        intersects = raycaster.intersectObjects(pieces.concat(faltants));
        if(!wireframeMode) {
            if(selection !== null) {
                selection.material = unselectedMAterial;
            }
        } else {
            if(selection !== null) {
                selection.material = wireframeMaterial;
            }
        }
        if (intersects.length > 0) {
            if (measure) {
                if (event.button == 0) {
                    var materialOne = new THREE.MeshBasicMaterial( {
                        color: 0x4e8064,
                        side: THREE.DoubleSide,
                        clippingPlanes: clippingPlanes,
                        clipShadows: true} );
                    var sphereOne = new THREE.Mesh( geometryMesure, materialOne );
                    sphereOne.position.set( intersects[ 0 ].point.x , intersects[ 0 ].point.y, intersects[ 0 ].point.z );
                    mesurePointsList.push(sphereOne);
                    mesurePoints.add(sphereOne);
                    document.getElementById("measureNo").innerHTML = countMesure();
                    document.getElementById("measurePo").innerHTML = mesurePointsList.length;
                    scene.add(mesurePoints);
                } else {
                    intersects = raycaster.intersectObjects(mesurePointsList);
                    var indexForRemove = mesurePointsList.indexOf(intersects[0].object);
                    if (indexForRemove > -1) {
                        mesurePointsList.splice(indexForRemove, 1);
                    }
                    mesurePoints.remove(intersects[0].object);
                    document.getElementById("measurePo").innerHTML = mesurePointsList.length;
                    document.getElementById("measureNo").innerHTML = countMesure();
                }
            } else {
                selected = intersects[0].object;
                if(!wireframeMode) {
                    selected.material = selectionMaterial;
                } else {
                    selected.material = wireframeMaterialSelected;
                }
                selection = selected;
            }
        } else {
            if(torchMode & (event.button == 1)) {
                intersects = raycaster.intersectObjects([sphere_world]);
                scene.remove(sphere);
                sphere.position.set( intersects[ 0 ].point.x , intersects[ 0 ].point.y, intersects[ 0 ].point.z );
                scene.add(sphere);
                spotLight.position.set( intersects[ 0 ].point.x, intersects[ 0 ].point.y, intersects[ 0 ].point.z );
            }
        }
    });

    startWorker();

    function goodParts() {
        allParts();
        scene.remove(object_f);
    }

    function allParts() {
        scene.add(object);
        scene.add(object_f);
    }

    function faltantParts() {
        allParts();
        scene.remove(object);
    }

    function up_camera() {
        camera.position.z = 30;
        camera.position.y = 0;
        camera.position.x = 0;
        camera.lookAt(new THREE.Vector3(0, 0, 0));
    }

    function down_camera() {
        camera.position.z = 0;
        camera.position.y = 30;
        camera.position.x = 0;
        camera.lookAt(new THREE.Vector3(0, 0, 0));
    }

    function left_camera() {
        camera.position.z = 0;
        camera.position.y = 0;
        camera.position.x = 30;
        camera.lookAt(new THREE.Vector3(0, 0, 0));
    }

    function measures() {
        measure = !measure;
        if(measure){
            showMeasurebar();
        } else {
            hideMeasurebar();
            scene.remove(mesurePoints);
            resetMesures();
        }
    }

    function resetMesures() {
        scene.remove(mesurePoints);
        mesurePoints = new THREE.Object3D();
        mesurePointsList = [];
        document.getElementById("measurePo").innerHTML = mesurePointsList.length;
        document.getElementById("measureNo").innerHTML = 0;
    }

    function deleteLastMesure() {
        mesurePoints.remove(mesurePointsList.pop());
        document.getElementById("measurePo").innerHTML = mesurePointsList.length;
        document.getElementById("measureNo").innerHTML = countMesure();
    }

    function countMesure() {
        var result = 0;
        for (var i=0; i<(mesurePointsList.length-1); i++) {
            var positionPointAnterior  = mesurePointsList[i].getWorldPosition();
            var positionPointNow = mesurePointsList[i+1].getWorldPosition();
            var distanceX = positionPointAnterior.x - positionPointNow.x;
            var distanceY = positionPointAnterior.y - positionPointNow.y;
            var distanceZ = positionPointAnterior.z - positionPointNow.z;
            var distance  = Math.sqrt(distanceX*distanceX+distanceY*distanceY+distanceZ*distanceZ);
            result += distance;
        }
        return precisionRound(result,1);
    }

    function precisionRound(number, precision) {
        var factor = Math.pow(10, precision);
        return Math.round(number * factor) / factor;
    }

    function addTorch() {
        if(!torchMode) {
        renderer.shadowMap.enabled = true;
        spotLight = new THREE.SpotLight( 0xffffff, 1 );
        spotLight.position.set( 15, 40, 35 );
        spotLight.angle = Math.PI / 4;
        spotLight.penumbra = 0.05;
        spotLight.decay = 2;
        spotLight.distance = 200;
        spotLight.castShadow = true;
        spotLight.shadow.mapSize.width = 1024;
        spotLight.shadow.mapSize.height = 1024;
        spotLight.shadow.camera.near = 10;
        spotLight.shadow.camera.far = 200;
        scene.add( spotLight );
        } else{
            renderer.shadowMap.enabled = false;
            scene.remove( spotLight );
            scene.remove( sphere );
        }
        torchMode = !torchMode;
    }

    function wireframeSet() {
        var index;
        var allpieces =  pieces.concat(faltants);
        for(index = 0; index < allpieces.length; index++) {
            if(!wireframeMode) {
            allpieces[index].material = wireframeMaterial;
            } else {
            allpieces[index].material = unselectedMAterial;
            }
        }
        wireframeMode = !wireframeMode;
    }

    function changeRotationMode() {
        rotationMode = !rotationMode;
        if ($('#pauseButton').html().indexOf("Pause") >= 0) {
            $('#pauseButton').html('<i class="fas fa-play"></i> Play');
        } else {
             $('#pauseButton').html('<i class="fas fa-pause"></i> Pause');
        }
    }

    function saveAsImage() {
            var imgData, imgNode;

            try {
                var strMime = "image/jpeg";
                imgData = renderer.domElement.toDataURL(strMime);

                saveFile(imgData.replace(strMime, strDownloadMime), "test.jpg");

            } catch (e) {
                console.log(e);
                return;
            }

        }

        var saveFile = function (strData, filename) {
            var link = document.createElement('a');
            if (typeof link.download === 'string') {
                document.body.appendChild(link); //Firefox requires the link to be in the body
                link.download = filename;
                link.href = strData;
                link.click();
                document.body.removeChild(link); //remove the link when done
            } else {
                location.replace(uri);
            }
        }

  </script>
